import { userData } from "./database.js"
import { crypto } from './cryptobot.js'
import { updateDataJSON } from "./database.js"
import { shopList } from "./index.js"
import { backButton } from "./index.js"
// –º–µ–π–±–∏ –µ—â–µ –∏–º–ø–æ—Ä—Ç–Ω—É—Ç—å setBackButton –Ω–æ —Ö–∑ –µ—Å–ª–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç
const CHANNEL_ID = '-1003074067217'




export default function callbackHandler (bot) {
    
    async function backHandler (presserId, replaceMsgId) {
        await bot.editMessageText('üì° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å! \n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:', 
            {
                chat_id: presserId,
                message_id: replaceMsgId,
                parse_mode: 'markdown',
                reply_markup: {
                    inline_keyboard: shopList
                }
            }
        )
    }

    bot.on('callback_query', async (query) => {      
        const cbUserId = query.from.id
        const data = query.data
        const u = updateDataJSON(cbUserId, undefined, `${query.from.username}_Payment`) // –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–∏–º–±–∞ –Ω–∞—Ö—É–π –ü–ê–ê–ê–ê)
        const inviterId = u.invitedBy
        const localMessageId = query.message.message_id
        if (!u || (!u.verifiedUsers && data !== 'check')) return
        try {
            switch (data) {
                // –ù–ê –ù–ï–î–ï–õ–Æ
                case 'buy_week':
                    console.error('!WORKING, SUCCESS!')
                    await bot.editMessageText('\nüí∏ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*:\n', {
                        chat_id: cbUserId,
                        message_id: localMessageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                // –ö–†–ò–ü–¢–ê
                                [{text: 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Cryptobot Telegram)', callback_data: 'cryptobot_pay_week'}],
                                backButton
                            ]
                        }
                    })
                    break

                case 'buy_month':
                    await bot.editMessageText('\nüí∏ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*:\n', {
                        chat_id: cbUserId,
                        message_id: localMessageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                // –ö–†–ò–ü–¢–ê
                                [{text: 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Cryptobot Telegram)', callback_data: 'cryptobot_pay_month'}],
                                backButton
                            ]
                        }
                    })
                    break

                case 'buy_three_month':
                    await bot.editMessageText('\nüí∏ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*:\n', {
                        chat_id: cbUserId,
                        message_id: localMessageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                // –ö–†–ò–ü–¢–ê
                                [{text: 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Cryptobot Telegram)', callback_data: 'cryptobot_pay_three_month'}],
                                backButton
                            ]
                        }
                    })
                    break
                
                // –ö–†–ò–ü–¢–ê

                case 'cryptobot_pay_week':
                    const weekCryptoInvoice = await crypto.createInvoice({
                        asset: 'USDT',
                        amount: 1,
                        description: 'üì° –ü–æ–∫—É–ø–∫–∞ VPN –Ω–∞ 7 –¥–Ω–µ–π'
                    })
                    // –ø–µ–π –ª–∏–Ω–∫
                    const weekCryptoPayLink = weekCryptoInvoice.BotPayUrl || weekCryptoInvoice.miniAppPayUrl || weekCryptoInvoice.webAppPayUrl
                    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                    u.cryptoId = weekCryptoInvoice.invoice_id
                    await bot.sendMessage(cbUserId,
                        `üìã *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 7 –¥–Ω–µ–π:*\n\n` +
                        `üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n` +
                        `${weekCryptoPayLink}`,
                        {
                            parse_mode: 'Markdown',
                        }
                    )
                    break

                case 'cryptobot_pay_month':
                    const monthCryptoinvoice = await crypto.createInvoice({
                        asset: 'USDT',
                        amount: 1,
                        description: 'üì° –ü–æ–∫—É–ø–∫–∞ VPN –Ω–∞ –º–µ—Å—è—Ü'
                    })
                    // –ø–µ–π –ª–∏–Ω–∫
                    const monthCryptoPayLink = monthCryptoinvoice.BotPayUrl || monthCryptoinvoice.miniAppPayUrl || monthCryptoinvoice.webAppPayUrl
                    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                    u.cryptoId = monthCryptoinvoice.invoice_id

                    await bot.sendMessage(cbUserId,
                        `üìã *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ –º–µ—Å—è—Ü:*\n\n` +
                        `üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n` +
                        `${monthCryptoPayLink}`,
                        {
                            parse_mode: 'Markdown',
                        }
                    )
                    break

                case 'cryptobot_pay_three_month':
                    const threeMonthCryptoinvoice = await crypto.createInvoice({
                        asset: 'USDT',
                        amount: 1,
                        description: 'üì° –ü–æ–∫—É–ø–∫–∞ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞'
                    })
                    // –ø–µ–π –ª–∏–Ω–∫
                    const threeMonthCryptoPayLink = threeMonthCryptoinvoice.BotPayUrl || threeMonthCryptoinvoice.miniAppPayUrl || threeMCryptoinvoice.webAppPayUrl
                    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                    u.cryptoId = threeMonthCryptoinvoice.invoice_id

                    await bot.sendMessage(cbUserId,
                        `üìã *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞:*\n\n` +
                        `üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n` +
                        `${threeMonthCryptoPayLink}`,
                        {
                            parse_mode: 'Markdown',
                        }
                    )
                    break


                // –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–ü–ò–°–ö–£ (–ö–ù–û–ü–ö–ê) (–ü–ï–†–ï–ù–ï–° –¢–ê–ö –ö–ê–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–†–û–ß–ï –•–£–ô –¢–ê–ú –ü–õ–ê–í–ê–õ)
                case 'check':
                    u.waitingForButtonPress = false
                    delete u.waitingForButtonPress
                    const requestMember = await bot.getChatMember(CHANNEL_ID, cbUserId)
                    const subscribed = ['member', 'administrator', 'creator'].includes(requestMember.status)

                    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å –∑–∞ —ç—Ç–æ
                    if(subscribed) {            
                        u.cheese += 5
                        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
                        if (inviterId && userData[inviterId] && !u.getCheeseRefBonus) {
                            userData[inviterId].cheese += 10
                            u.getCheeseRefBonus = true
                            await bot.sendMessage(u.invitedBy, `üéâ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–¢—ã –ø–æ–ª—É—á–∏–ª +10 üßÄ!
                            üëâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —Å—ã—Ä–æ–≤ /cheese`)
                        }
                        await bot.editMessageText(
                            'üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –ø–æ–ª—É—á–∏–ª–∏ **+5 üßÄ**! –ú–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start',
                            {
                                chat_id: cbUserId, 
                                message_id: localMessageId, 
                                parse_mode: 'Markdown',
                                reply_markup: { inline_keyboard: []}
                            }
                        )
                    } else {
                        await bot.editMessageText(
                            '‚ùå –í—ã –µ—â—ë **–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã**.\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **+5 üßÄ**!',
                            {
                                chat_id: cbUserId,
                                message_id: localMessageId,
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [[
                                        {text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check'},
                                        {text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/cheessechanel'}
                                    ]]
                                }
                            }
                        )
                    }

                    break
                
                case 'back':
                    backHandler(cbUserId, localMessageId)
                    break
            }

            await bot.answerCallbackQuery(query.id)
        } catch(err) {
            console.log('–æ—à–∏–±–∫–∞ –≤ –∫–æ–ª–±–µ–∫–µ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ', err)
        }
    })


    // !!!!!!!!!!!! –î–ê–õ–¨–®–ï –ù–ï –î–ï–õ–ê–õ !!!!!!!!!!!!!!!!!!!!



    // –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    bot.on('inline_query', async (query) => {
        const referalLink = `https://t.me/orangeCheesyBot?start=${query.from.id}`
        const messageRequest = `*–ü—Ä–∏–≤–µ—Ç!* üëã
        –ò—Å–ø–æ–ª—å–∑—É–π *—Å—ã—Ä–Ω—ã–π VPN* üßÄ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π –∏ –ø–æ–ª—É—á–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
        –ü—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã —Ç—ã –∏ —Ç–≤–æ–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª–∏ *–±–æ–Ω—É—Å–æ–≤* üòâ

        üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏* —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è!

        –ü–æ–¥–∫–ª—é—á–∞–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: [–ù–∞–∂–º–∏ –∑–¥–µ—Å—å](${referalLink})`

        const results = [
            {
                type: 'article',
                id: 'share_ref',
                title: '‚úâÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—ã—Ä–Ω—ã–º VPN –±–æ—Ç–æ–º',
                description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –¥–ª—è –¥—Ä—É–∑–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é!',
                input_message_content: {
                    message_text: messageRequest,
                    parse_mode: 'Markdown'
                }
            }
        ]
        bot.answerInlineQuery(query.id, results)
    })
}
