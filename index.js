// –≤–º–µ—Å—Ç–æ require() –≤ —Å—Ç–æ —Ä–∞–∑ –Ω–∞—Ö—É–π —É–¥–æ–±–Ω–µ–µ
import dotenv from 'dotenv'
import TelegramBot from 'node-telegram-bot-api'
// —Ç—É—Ç —â—è –ø–æ–¥—Ä–æ–±–Ω–æ –∫–æ—Ä–æ—á–µ –∏–∑ —Ñ–∞–π–ª–∞ cryptobot.js –≤—ã—Å–æ–≤—ã–≤–∞–µ–º –ö–û–ù–°–¢ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø–ª–∞—Ç—É –∏ –≤—Å—é –∑–∞–ª—É–ø—É –≤ –æ–±—â–µ–º, —Ç–∞–º –∫–∞–∫ new –≤–æ—Ç —Ç–∞ –∑–∞–ª—É–ø–∞ –∫–∞–∫ —Ç—É—Ç —Å —Ç–µ–ª–µ–≥–æ–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª –ø–∏—à–∏ —Å—ã—Ä
import { crypto } from './cryptobot.js'
import { updateDataJSON } from './database.js'

dotenv.config()

const CHANNEL_ID = '-1003074067217'
const token = process.env.BOT_TOKEN
export const bot = new TelegramBot(token, {polling: true})

bot.setMyCommands([
    {command: '/start', description: '–Ω–∞—á–∞–ª–æ'},
    {command: '/account', description: '–º–æ–π –∞–∫–∫–∞—É–Ω—Ç'},
    {command: '/ref', description: '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'},
    {command: '/help', description: '—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'},
    {command: '/cheese', description: '–ø–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã (–±–æ–Ω—É—Å—ã)'}
])
console.log('bot running...')

// —Ñ—É–Ω–∫—Ü–∏–∏

function captcha() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
    let captchaResult = ''
    for (let i = 0; i < 6; i++) {
        captchaResult += chars[Math.floor(Math.random() * chars.length)]
    }
    return captchaResult
}

function referalSystem (userFrom, txt, userDb) {
    const parts = txt.split(' ')
    const refId = parts[1]
    if (refId && refId !== String(userFrom) && !userDb.invitedBy) {
        userDb.invitedBy = refId
        return true // –∑–∞—á–∏—Å–ª—è–µ–º —Å—ã—Ä—ã
    }
    return false // –Ω–µ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ—à–µ–ª –æ–Ω –Ω–∞—Ö—É–π —É–µ–±–æ–∫ –±–ª—è
}

// !—Ä–∞—Å–∫–æ–º–µ–Ω—Ç –µ—Å–ª–∏ –¥–µ–±–∞–≥–∞—Ç—å!

// const adminId = 6336954115 // !!!!!!!!!!!!!!!!!!!!!!! —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω –º–µ–Ω—é
// userData[adminId] = {
//     balance: 0,
//     cheese: 0,
//     verifiedUsers: true,
//     cryptoId: 'admin_crypto_id'
// }

// !—Ä–∞—Å–∫–æ–º–µ–Ω—Ç –µ—Å–ª–∏ –¥–µ–±–∞–≥–∞—Ç—å!


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async msg => {
    // –≤—Å–µ —à–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —é–∑–µ—Ä—É
    const chatId = msg.chat.id
    const userId = msg.from.id
    const text = msg.text
    const userFirstName = msg.from.first_name // –∏–º—è –≤ —Ç–µ–ª–µ–≥–µ

    // –æ–±–Ω–æ–≤–∞, –Ω–∞–ø–∏—Å–∞–ª –≤ –∫–æ–º–º–∏—Ç–µ
    const u = updateDataJSON(userId, userFirstName, msg.from.username)
    console.log(msg.from.username, userFirstName, userId)

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –≤–∫–ª—é—á–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø–µ—Ä–º–∞—á
    if (u.banned) {
        await bot.sendMessage(chatId, '‚ùå –£–ø—Å! –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç –Ω–∞–≤—Å–µ–≥–¥–∞.\n–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞. üßÄ')
        return
    }
    if (u.banUntil && Date.now() < u.banUntil) {
        const mins = Math.ceil((u.banUntil - Date.now()) / 60000)
        await bot.sendMessage(chatId, `‚åõ –û—Å—Ç–∞–ª–æ—Å—å ${mins} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start üßÄ`, { parse_mode: 'Markdown' });
        return
    } else if (u.banUntil && Date.now() >= u.banUntil) delete u.banUntil


    // –∫–∞–ø—á–∞
    if (typeof text === 'string' && text.startsWith('/start')) {
        referalSystem(userId, text, u)
        if (!u.verifiedUsers) {
            if (u.chancesLeft <= 0) {
                u.banned = true
                await bot.sendMessage(chatId, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã. –ï—Å–ª–∏ –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. üßÄ')
                return
            }

            const sendCaptcha = captcha()
            u.userCaptcha = sendCaptcha

            await bot.sendMessage(chatId, 
            `üßÄ –ü—Ä–∏–≤–µ—Ç, ${userFirstName}!  

    üöÄ –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç.  

    ‚å®Ô∏è –í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ —Ç–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å:\n\n` + sendCaptcha, 
        { parse_mode: 'Markdown' }
        )            
            return
        }

        await bot.sendMessage(chatId, 'üì° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å! \n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '1 –ù–µ–¥–µ–ª—è - 0‚ÇΩ', callback_data: 'buy_week' }],
                    [{text: '1 –ú–µ—Å—è—Ü - 150‚ÇΩ', callback_data: 'buy_month'}],
                    [{text: '3 –ú–µ—Å—è—Ü–∞ - 300‚ÇΩ', callback_data: 'buy_three_month'}]
                ]
            }}
        )
        return
    }
    
    if (!u.verifiedUsers && u.userCaptcha) {
        if (text.startsWith('/') && text !== '/start') {
            await bot.sendMessage(chatId, 'üö´ *–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã*', {
                parse_mode: 'Markdown'
            })
            return
        }

        if (text === u.userCaptcha) {
            // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
            await bot.sendMessage(chatId, '‚úÖ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check'},
                            {text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/cheessechanel'}
                        ]
                    ]
                }
            }
            )
            u.verifiedUsers = true
            delete u.userCaptcha
            delete u.captchaAttempts
            delete u.chancesLeft
            delete u.banUntil
            delete u.banned
        } else {
            if (u.captchaAttempts > 0) {
                u.captchaAttempts--
                await bot.sendMessage(chatId, `–≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ‚ùó ${u.captchaAttempts} ‚ùó`)

                if (u.captchaAttempts === 0) {
                    u.chancesLeft--
                    if (u.chancesLeft <= 0) {
                        u.banned = true
                        await bot.sendMessage(chatId, '‚ùå –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ —à–∞–Ω—Å—ã (3 –∏–∑ 3).\nüö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç –Ω–∞–≤—Å–µ–≥–¥–∞.')
                        return
                    }
                    u.banUntil = Date.now() + 2 * 60 * 1000
                    u.captchaAttempts = 4
                    delete u.userCaptcha
                    await bot.sendMessage(chatId, `‚ö†Ô∏è –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª 3 –ø–æ–ø—ã—Ç–∫–∏.\n–û—Å—Ç–∞–ª–æ—Å—å —à–∞–Ω—Å–æ–≤: ${u.chancesLeft}.\n‚è≥ –ü–æ–¥–æ–∂–¥–∏ 2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.`)
                    return
                }
            }
        }
    }
    ///////////////////////////////////////////

    // console.log(u)
    // –ø–æ–∫–∞ –≤ u.userCaptcha —á—Ç–æ —Ç–æ –µ—Å—Ç—å, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É—Å–ª–æ–≤–∏–µ –Ω–∏–∂–µ

    switch (text) {
        case '/account':
            await bot.sendMessage(chatId,
                `üè¶ –¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç , ${userFirstName}üßÄ \n\n` +
                `üí≥ –±–∞–ª–∞–Ω—Å: ${u.balance} ‚ÇΩ\n` +
                `üßÄ –±–æ–Ω—É—Å—ã (—Å—ã—Ä—ã): üßÄ${u.cheese}\n` +
                `üìÑ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: ${u.whitelist ? 'üîí–¥–∞' : 'üîì –Ω–µ—Ç'}`
            )
            break

        case '/balance':
            await bot.sendMessage(chatId, `üí∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: ${u.balance} ‚ÇΩ`)
            break

        case '/help':
            await bot.sendMessage(chatId,
                'üìñ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' +
                '/start ‚Äì –∑–∞–ø—É—Å–∫\n' +
                '/account ‚Äì –º–æ–π –∞–∫–∫–∞—É–Ω—Ç\n' +
                '/ref ‚Äì —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n' +
                '/cheese ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã (—Å—ã—Ä—ã)\n' +
                '/help ‚Äì –ø–æ–º–æ—â—å'
            )
            break

        case '/cheese':
            const cheeseBonusCheckMSG = `üßÄ –¢–≤–æ–∏ –±–æ–Ω—É—Å–Ω—ã–µ —Å—ã—Ä—ã: ${u.cheese} 
            –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ —Å—ã—Ä–∞? ü§ë  
            –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π! üëá  

            –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /ref —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã ‚úâÔ∏è
            –í—ã–ø–æ–ª–Ω—è–π –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å —Å—ã—Ä–∞ üßÄ`

            await bot.sendMessage(chatId, cheeseBonusCheckMSG, { parse_mode: 'Markdown' })
            break

        case '/ref':
            await bot.sendMessage(chatId, 'üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 10 –±–æ–Ω—É—Å–Ω—ã—Ö —Å—ã—Ä–æ–≤ üßÄ!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π:', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            // —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ –∫–Ω–æ–ø–∫–∞
                            {
                                text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π üßÄ‚úâÔ∏è',
                                switch_inline_query: ''
                            }
                        ]
                    ]
                }
            })
            break
    }
})


bot.on('callback_query', async (query) => {      
    const cbUserId = query.from.id
    const data = query.data
    const u = updateDataJSON(cbUserId, undefined, `${query.from.username}_Payment`) // –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–∏–º–±–∞ –Ω–∞—Ö—É–π –ü–ê–ê–ê–ê)
    const inviterId = u.invitedBy
    // –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const localMessageId = query.message.message_id
    if (!u || (!u.verifiedUsers && data !== 'check')) return
    try {

        // !!!!!!!!!!!!! –ù–û–í–û–ï !!!!!!!!!!!!!

        switch (data) {
            // –û–ü–õ–ê–¢–ê –í–ü–ù, –í–°–ï –ß–¢–û –ë–£–î–ï–¢ –° –ö–û–®–ï–õ–¨–ö–ê–ú–ò –°–í–Ø–ó–ê–ù–û
            
            // –ù–ê –ù–ï–î–ï–õ–Æ
            case 'buy_week':
                await bot.editMessageText('\nüí∏ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*:\n', {
                    chat_id: cbUserId,
                    message_id: localMessageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            // –ö–†–ò–ü–¢–ê
                            [{text: 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Cryptobot Telegram)', callback_data: 'cryptobot_pay_week'}]
                        ]
                    }
                })
                break

            case 'cryptobot_pay_week':
                const weekCryptoInvoice = await crypto.createInvoice({
                    asset: 'USDT',
                    amount: 1,
                    description: 'üì° –ü–æ–∫—É–ø–∫–∞ VPN –Ω–∞ 7 –¥–Ω–µ–π'
                })
                // –ø–µ–π –ª–∏–Ω–∫
                const weekCryptoPayLink = weekCryptoInvoice.BotPayUrl || weekCryptoInvoice.miniAppPayUrl || weekCryptoInvoice.webAppPayUrl
                // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                u.cryptoId = weekCryptoInvoice.invoice_id
                await bot.sendMessage(cbUserId,
                    `üìã *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 7 –¥–Ω–µ–π:*\n\n` +
                    `üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n` +
                    `${weekCryptoPayLink}`,
                    {
                        parse_mode: 'Markdown',
                    }
                )
                break



            case 'buy_month':
                await bot.editMessageText('\nüí∏ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*:\n', {
                    chat_id: cbUserId,
                    message_id: localMessageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            // –ö–†–ò–ü–¢–ê
                            [{text: 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Cryptobot Telegram)', callback_data: 'cryptobot_pay_month'}]
                        ]
                    }
                })
                break

            case 'cryptobot_pay_month':
                const monthCryptoinvoice = await crypto.createInvoice({
                    asset: 'USDT',
                    amount: 1,
                    description: 'üì° –ü–æ–∫—É–ø–∫–∞ VPN –Ω–∞ –º–µ—Å—è—Ü'
                })
                // –ø–µ–π –ª–∏–Ω–∫
                const monthCryptoPayLink = monthCryptoinvoice.BotPayUrl || monthCryptoinvoice.miniAppPayUrl || monthCryptoinvoice.webAppPayUrl
                // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                u.cryptoId = monthCryptoinvoice.invoice_id

                await bot.sendMessage(cbUserId,
                    `üìã *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ –º–µ—Å—è—Ü:*\n\n` +
                    `üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n` +
                    `${monthCryptoPayLink}`,
                    {
                        parse_mode: 'Markdown',
                    }
                )
                break


            case 'buy_three_month':
                await bot.editMessageText('\nüí∏ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*:\n', {
                    chat_id: cbUserId,
                    message_id: localMessageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            // –ö–†–ò–ü–¢–ê
                            [{text: 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Cryptobot Telegram)', callback_data: 'cryptobot_pay_three_month'}]
                        ]
                    }
                })
                break

            case 'cryptobot_pay_three_month':
                const threeMonthCryptoinvoice = await crypto.createInvoice({
                    asset: 'USDT',
                    amount: 1,
                    description: 'üì° –ü–æ–∫—É–ø–∫–∞ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞'
                })
                // –ø–µ–π –ª–∏–Ω–∫
                const threeMonthCryptoPayLink = threeMonthCryptoinvoice.BotPayUrl || threeMonthCryptoinvoice.miniAppPayUrl || threeMCryptoinvoice.webAppPayUrl
                // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
                u.cryptoId = threeMonthCryptoinvoice.invoice_id

                await bot.sendMessage(cbUserId,
                    `üìã *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞:*\n\n` +
                    `üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:\n` +
                    `${threeMonthCryptoPayLink}`,
                    {
                        parse_mode: 'Markdown',
                    }
                )
                break

            // –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–ü–ò–°–ö–£ (–ö–ù–û–ü–ö–ê) (–ü–ï–†–ï–ù–ï–° –¢–ê–ö –ö–ê–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–†–û–ß–ï –•–£–ô –¢–ê–ú –ü–õ–ê–í–ê–õ)
            case 'check':
                u.waitingForButtonPress = false
                delete u.waitingForButtonPress
                const requestMember = await bot.getChatMember(CHANNEL_ID, cbUserId)
                const subscribed = ['member', 'administrator', 'creator'].includes(requestMember.status)

                // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å –∑–∞ —ç—Ç–æ
                if(subscribed) {            
                    u.cheese += 5
                    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
                    if (inviterId && userData[inviterId] && !u.getCheeseRefBonus) {
                        userData[inviterId].cheese += 10
                        u.getCheeseRefBonus = true
                        await bot.sendMessage(u.invitedBy, `üéâ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–¢—ã –ø–æ–ª—É—á–∏–ª +10 üßÄ!
                        üëâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —Å—ã—Ä–æ–≤ /cheese`)
                    }
                    await bot.editMessageText(
                        'üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –ø–æ–ª—É—á–∏–ª–∏ **+5 üßÄ**! –ú–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start',
                        {
                            chat_id: cbUserId, 
                            message_id: localMessageId, 
                            parse_mode: 'Markdown',
                            reply_markup: { inline_keyboard: []}
                        }
                    )
                } else {
                    await bot.editMessageText(
                        '‚ùå –í—ã –µ—â—ë **–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã**.\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **+5 üßÄ**!',
                        {
                            chat_id: cbUserId,
                            message_id: localMessageId,
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [[
                                    {text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check'},
                                    {text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/cheessechanel'}
                                ]]
                            }
                        }
                    )
                }

                break
        }

        await bot.answerCallbackQuery(query.id)
    } catch(err) {
        console.log('–æ—à–∏–±–∫–∞ –≤ –∫–æ–ª–±–µ–∫–µ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ', err)
    }
})


// !!!!!!!!!!!! –î–ê–õ–¨–®–ï –ù–ï –î–ï–õ–ê–õ !!!!!!!!!!!!!!!!!!!!



// –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
bot.on('inline_query', async (query) => {
    const referalLink = `https://t.me/orangeCheesyBot?start=${query.from.id}`
    const messageRequest = `*–ü—Ä–∏–≤–µ—Ç!* üëã
    –ò—Å–ø–æ–ª—å–∑—É–π *—Å—ã—Ä–Ω—ã–π VPN* üßÄ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π –∏ –ø–æ–ª—É—á–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
    –ü—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã —Ç—ã –∏ —Ç–≤–æ–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª–∏ *–±–æ–Ω—É—Å–æ–≤* üòâ

    üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏* —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è!

    –ü–æ–¥–∫–ª—é—á–∞–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: [–ù–∞–∂–º–∏ –∑–¥–µ—Å—å](${referalLink})`

    const results = [
        {
            type: 'article',
            id: 'share_ref',
            title: '‚úâÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—ã—Ä–Ω—ã–º VPN –±–æ—Ç–æ–º',
            description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –¥–ª—è –¥—Ä—É–∑–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é!',
            input_message_content: {
                message_text: messageRequest,
                parse_mode: 'Markdown'
            }
        }
    ]
    bot.answerInlineQuery(query.id, results)
})

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// bot.on('polling_error', console.error)